% This code is part of:
%
%   CMPSCI 670: Computer Vision
%   University of Massachusetts, Amherst
%   Instructor: Subhransu Maji
%
% Load images
im = im2double(imread('C:/Users/User/Documents/UMass Amherst/Semester 1/COMPSCI 670 - Computer Vision/Mini Projects/2/p2_data/data/denoising/saturn.png'));
noise1 = im2double(imread('C:/Users/User/Documents/UMass Amherst/Semester 1/COMPSCI 670 - Computer Vision/Mini Projects/2/p2_data/data/denoising/saturn-noise2g.png'));
noise2 = im2double(imread('C:/Users/User/Documents/UMass Amherst/Semester 1/COMPSCI 670 - Computer Vision/Mini Projects/2/p2_data/data/denoising/saturn-noise2sp.png'));

% Compute errors
error1 = sum(sum((im - noise1).^2));
error2 = sum(sum((im - noise2).^2));
fprintf('Input, Errors: %.2f %.2f\n', error1, error2)

% Display the images
figure(1);
subplot(1,3,1); imshow(im); title('Input');
subplot(1,3,2); imshow(noise1); title(sprintf('SE %.2f', error1));
subplot(1,3,3); imshow(noise2); title(sprintf('SE %.2f', error2));

%% Denoising algorithm (Gaussian filtering)
for sigma = 0.1:0.1:2
    gaussian_filter=fspecial('gaussian',[3 3],sigma);
    filtered_image1=imfilter(noise1,gaussian_filter);
    filtered_image2=imfilter(noise2,gaussian_filter);
    error_1=sum(sum((im - filtered_image1).^2));
    error_2=sum(sum((im - filtered_image2).^2));
    fprintf('Sigma, Error 1, Error 2: %.2f %.2f% .2f\n', sigma, error_1,error_2);
%     figure;
%     imshow(filtered_image1);
%     figure;
%     imshow(filtered_image2);
end
%% Denoising algorithm (Median filtering)
for m=1:5
    for n=1:5
        filtered_image3=medfilt2(noise1,[m n]);
        filtered_image4=medfilt2(noise2,[m n]);
        error_3=sum(sum((im - filtered_image3).^2));
        error_4=sum(sum((im - filtered_image4).^2));
        fprintf('Neighborhood Length,Neighborhood Width, Error 1, Error2: %.2f %.2f %.2f% .2f\n', m, n, error_3,error_4);
%         figure;
%         imshow(filtered_image3);
%         figure;
%         imshow(filtered_image4);
    end
end
%% Denoising alogirthm (Non-local means)

filtered_image5 = nl_mean_out(noise1, 10, 2, 0.5);
filtered_image6 = nl_mean_out(noise2, 4, 2, 0.25);
error_5=sum(sum((im - filtered_image5).^2));
error_6=sum(sum((im - filtered_image6).^2));
fprintf('Error 1, Error2: %.2f %.2f\n', error_5,error_6);
























% cropped_image=imcrop(noise1,[100,100,100-50,100-40]);
% figure;
% imshow(cropped_image);
% % ImagePatches = nlfilter(cropped_image, [7 7], @(block) {block}); %store each block generated by nlfilter into scalar cell of cell array
% % ImagePatches = cat(3, ImagePatches{:}); %and concatenate in 3rd dimension
% % figure;
% % imshow(ImagePatches);
% patch_size=7;
% padded_image = padarray(cropped_image,[7 7],'both');
% [size_x,size_y] = size(padded_image);
% [x,y] = size(cropped_image);
% 
% patch = zeros(size_x,size_y,size_x*size_y);
% for i = 1:size_x
%     for j=1:size_y
%         func = @(block_struct)block_struct.data;
%         patch(:,:,i*j) = blockproc(cropped_image,[7 7],func);
%         disp(patch(1));
%     end
% end
% disp(x);
% disp(y);
% ImagePatches = zeros(patch_size,patch_size);
% patches = zeros(x,y);
% %for k = 1:x*y
%   for i = 8:x+8
%       for j = 8:y+8
%           ImagePatches(:,:) = padded_image(i-3:i+3, j-3:j+3);
%           patches = ImagePatches(:,:);
%           %figure;
%           disp(size(ImagePatches));
%           disp(size(patches));
%       end
%   end
% %end
% disp("done");


